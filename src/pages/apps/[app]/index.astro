---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import AppPage from "../../../layouts/AppPage.astro";
import DownloadBar from "../../../components/DownloadBar.astro";
import type { CollectionEntry } from "astro:content";

export async function getStaticPaths() {
  const collection = await getCollection("apps");
  return collection
    .filter((entry) => entry.data.release.type === "indie")
    .map((entry) => ({
      params: { app: entry.slug },
      props: { entry },
    }));
}

const entry: CollectionEntry<"apps"> = Astro.props.entry;

const {
  slug,
  data: { title, tagline, icon, release },
  render,
} = entry;

const { Content } = await render();

let minimumSystemVersion: string | undefined;
let formattedPrice: string | undefined;
let purchaseURL: string | undefined;

if (release.type === "indie") {
  const {
    product: { formatted_price, short_url },
  } = await fetch(`https://api.gumroad.com/v2/products/${release.gumroadID}`, {
    headers: {
      Authorization: `Bearer ${import.meta.env.GUMROAD_ACCESS_TOKEN}`,
    },
  }).then((v) => v.json());
  purchaseURL = short_url;
  formattedPrice = formatted_price;
  const appcast = await fetch(release.sparkleAppcastURL).then((v) => v.text());
  [, minimumSystemVersion] =
    appcast.match(
      /<sparkle:minimumSystemVersion>(.+?)<\/sparkle:minimumSystemVersion>/
    ) ?? [];
}
---

<AppPage
  title={title}
  appName={title}
  description={tagline}
  openGraphImage={`/${slug}/og.png`}
  {slug}
>
  <div class="app__above-fold">
    <div class="app__above-fold-images">
      {
        release.type === "indie" && (
          <figure class="app__cover-wrapper">
            <Image
              class="app__cover"
              fetchpriority="high"
              src={release.cover}
              alt=""
            />
          </figure>
        )
      }
      <figure class="app__icon-wrapper">
        <Image
          class="app__icon"
          fetchpriority="high"
          src={icon}
          alt={`${title}â€™s app icon`}
        />
      </figure>
    </div>
    <p class="app__tagline h1">{tagline}</p>
  </div>
  <div class="app__technicals">
    {
      formattedPrice && purchaseURL && (
        <DownloadBar
          purchase={{ price: formattedPrice, url: purchaseURL }}
          downloadURL={`./${slug}/download`}
        />
      )
    }
    <div>
      {
        release.type === "indie" && (
          <small class="app__purchase-policy">{release.purchasePolicy}</small>
        )
      }
      {
        release.type === "indie" && minimumSystemVersion && (
          <small class="app__sys-reqs">
            Requires{" "}
            <strong>
              {release.platform} {minimumSystemVersion}
            </strong>{" "}
            or later.
          </small>
        )
      }
    </div>
    {
      release.type === "indie" && release.productHuntEmbed && (
        <div class="product-hunt-wrapper">
          <Fragment set:html={release.productHuntEmbed} />
        </div>
      )
    }
  </div>
  <div class="app__prose">
    <Content />
  </div>
</AppPage>
