---
import { CollectionEntry, getCollection } from "astro:content";
import { Image } from "astro:assets";
import Page from "../../../layouts/Page.astro";

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const appsEntries = await getCollection("apps");
  return appsEntries.map((entry) => ({
    params: { app: entry.slug },
    props: { entry },
  }));
}
// 2. When it's time to render, you can get the entry directly from the prop
const entry = Astro.props.entry as CollectionEntry<"apps">;
const { Content } = await entry.render();

const {
  data: {
    title,
    subtitle,
    cover,
    icon,
    iconAlt,
    downloadURL,
    platform,
    systemRequirements,
    price,
    purchaseURL,
    purchasePolicy,
    openGraphImage,
  },
} = entry;

const formatter = new Intl.NumberFormat(undefined, {
  style: "currency",
  currency: "USD",
});
---

<Page title={title} description={subtitle} openGraphImage={openGraphImage}>
  <div class="root">
    <!-- <figure class="cover">
      <Image src={cover} alt=""/>
    </figure> -->
    <div class="below-fold vstack">
      <div class="vstack">
        <div class="center intrinsic and-text">
          <figure class="icon">
            <Image fetchpriority="high" src={icon} alt={iconAlt} />
          </figure>
          <div class="vstack" style="--space:var(--size-2)">
            <p>{subtitle}</p>
            <div>
              <div
                class="cluster download-bar"
                style="--space:var(--size-2); --justify:center"
              >
                <a class="btn-primary" href={downloadURL}>{price ? "Try for Free" : "Download"}</a>
                {
                  price && (
                    <a
                      class="cluster btn-primary"
                      style="--space:var(--size-2)"
                      href={purchaseURL}
                    >
                      <span>Buy</span>
                      <small>{formatter.format(price)}</small>
                    </a>
                  )
                }
              </div>
            </div>
            <div class="terms">
              {purchasePolicy && <small>{purchasePolicy}</small>}
              <small>
                Requires {platform}
                {systemRequirements} or later.
              </small>
            </div>
          </div>
        </div>
      </div>
      <div class="app-content">
        <Content />
      </div>
    </div>
  </div>
</Page>

<style lang="scss">
  .root {
    margin-block: var(--size-3);
  }

  .icon {
    max-inline-size: var(--size-12);
  }

  h1 {
    font-weight: var(--bold);
  }

  .terms small {
    display: block;
    font-size: var(--font-size-0);
    color: var(--text-2);
  }

  .cover {
    inline-size: 100%;
    background: var(--gradient-7);

    img {
      margin-inline: auto;
      max-inline-size: var(--size-15);
      object-fit: cover;
      object-position: top;
    }
  }

  .below-fold {
    padding-inline: var(--bleed);
  }
</style>
