---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import AppLayout from "@layouts/AppLayout.astro";
import type { CollectionEntry } from "astro:content";

export async function getStaticPaths() {
  const collection = await getCollection("apps");
  return collection
    .filter((entry) => entry.data.release.type === "indie")
    .map((entry) => ({
      params: { app: entry.slug },
      props: { entry },
    }));
}

const entry: CollectionEntry<"apps"> = Astro.props.entry;

const {
  slug,
  data: { title, tagline, icon, release, reviews },
  render,
} = entry;

const { Content } = await render();

let minimumSystemVersion: string | undefined;

if (release.type === "indie") {
  const appcast = await fetch(release.sparkleAppcastURL).then((v) => v.text());
  [, minimumSystemVersion] =
    appcast.match(
      /<sparkle:minimumSystemVersion>(.+?)<\/sparkle:minimumSystemVersion>/
    ) ?? [];
}
---

<AppLayout description={tagline} {slug}>
  <div class="app__above-fold">
    {
      release.type === "indie" && (
        <figure class="app__cover-wrapper">
          <Image
            class="app__cover"
            fetchpriority="high"
            src={release.cover}
            alt=""
          />
        </figure>
      )
    }
    <figure class="app__icon-wrapper">
      <Image
        class="app__icon"
        fetchpriority="high"
        src={icon}
        alt={`${title}’s app icon`}
      />
    </figure>
  </div>
  <p class="app__tagline h1"><b>{title}</b>. {tagline}</p>
  <div class="app__technicals">
    {
      release.type === "indie" && (
        <div>
          <small class="app__purchase-policy">{release.purchasePolicy}</small>
          {minimumSystemVersion && (
            <small class="app__sys-reqs">
              Requires{" "}
              <strong>
                {release.platform} {minimumSystemVersion}
              </strong>{" "}
              or later.
            </small>
          )}
        </div>
      )
    }
    {
      release.type === "indie" && release.productHuntEmbed && (
        <div class="product-hunt-wrapper">
          <Fragment set:html={release.productHuntEmbed} />
        </div>
      )
    }
  </div>
  {
    reviews && (
      <section class="app-reviews">
        <header class="sr-only">
          <h2>Reviews</h2>
        </header>
        {reviews.map(({ rating, text, link, reviewer, platform }) => (
          <blockquote class="app-review">
            {rating && (
              <span class="review__rating">{Array(rating).fill("⭑")}</span>
            )}
            <p class="review__text">{text}</p>
            <footer class="review__cite">
              <a href={`${link}`}>
                — {reviewer}, <cite>{platform}</cite>
              </a>
            </footer>
          </blockquote>
        ))}
      </section>
    )
  }
  <div class="app-content">
    <Content />
  </div>
</AppLayout>
