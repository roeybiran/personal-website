---
import { Image } from "astro:assets";
import CrossIcon from "../assets/cross.svg";
import GitHubButton from "./GitHubButton.astro";
import PlusIcon from "../assets/plus.svg";

export interface Props {
  id: string;
  title: string;
  isoDate: string;
  dateString: string;
  type: string;
  stack: string[];
  subtitle?: string;
  links?: string[];
  responsibilities?: string[];
  press?: { name: string; url: string }[];
  video?: {
    poster: string;
    src: string;
  };
  image?: ImageMetadata;
}

const {
  id,
  title,
  subtitle,
  isoDate,
  dateString,
  links,
  responsibilities,
  stack,
  press,
  type,
  image,
  video,
} = Astro.props;
---

<article class="project-card" aria-label={title}>
  <dialog id={`${id}-popup`} class="project-card__popup">
    <div class="project-card__popup-inner | flow">
      <button class="project-card__close-button | button" aria-label="Close">
        <CrossIcon />
      </button>

      <header class="project-card__header">
        <p class="project-card__title">{title}</p>
        <time class="project-card__date" datetime={isoDate}>
          {dateString}
        </time>
        {subtitle && <p class="project-card__subtitle">{subtitle}</p>}
      </header>

      <dl class="project-card__links | flow-s">
        <dt class="sr-only">Links</dt>
        {
          links?.map((url: string) => (
            <dd>
              {url.includes("github") ? (
                <GitHubButton url={url} />
              ) : (
                <a class="button" target="_blank" href={url}>
                  View Project
                </a>
              )}
            </dd>
          ))
        }
      </dl>

      <dl class="project-card__meta">
        <div>
          <dt>Kind</dt>
          <dd class="project-card__badge">{type}</dd>
        </div>
        {
          responsibilities && (
            <div>
              <dt>Roles</dt>
              {responsibilities.map((r: string) => (
                <dd class="project-card__badge">{r}</dd>
              ))}
            </div>
          )
        }
        <div>
          <dt>Stack</dt>
          {
            stack.map((tech: string) => (
              <dd class="project-card__badge">{tech}</dd>
            ))
          }
        </div>
        {
          press && (
            <div class="project-card__press">
              <dt>Press</dt>
              {press.map(({ name, url }: { name: string; url: string }) => (
                <dd>
                  <a target="_blank" class="project-card__link" href={url}>
                    {name}
                  </a>
                </dd>
              ))}
            </div>
          )
        }
      </dl>
    </div>
  </dialog>
  <div class="project-card__media">
    {
      video && (
        <video
          class="project-card__video"
          src={video.src}
          poster={video.poster}
          loop
          autoplay
          muted
          playsinline
        />
      )
    }
    {image && <Image class="project-card__image" src={image} alt={title} />}
    <button
      class="project-card__button | button button--image"
      data-popup={`${id}-popup`}
      aria-label="Open project details"
    >
      <PlusIcon />
    </button>
  </div>
</article>

<script>
  document.querySelectorAll(".project-card__button").forEach((button) => {
    button.addEventListener("click", (e) => {
      const dialog = (e.target as HTMLButtonElement).dataset.popup;
      if (!dialog) return;
      const popup = document.getElementById(dialog) as HTMLDialogElement;
      popup?.showModal();
    });
  });

  document.querySelectorAll(".project-card__close-button").forEach((button) => {
    button.addEventListener("click", (e) => {
      const dialog = (e.target as HTMLButtonElement).closest("dialog");
      dialog?.close();
    });
  });

  document.addEventListener("click", ({ target }) => {
    if (target instanceof HTMLDialogElement) target.close();
  });
</script>
