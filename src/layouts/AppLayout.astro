---
import Root, { type Props as RootProps } from "./Root.astro";
import "@styles/layouts/_app-layout.scss";
import { getEntry } from "astro:content";
import fetchGumroadData from "@util/fetchGumroadData";
import chevronDown from "@assets/chevron-down.svg?raw";

interface Props extends Omit<RootProps, "openGraphImage" | "pageTitle"> {
  slug: string;
  pageSuffix?: string;
}

const { slug, pageSuffix } = Astro.props;

const entry = await getEntry("apps", slug);

if (!entry) throw new Error();

const {
  data: { title, icon, gumroadID },
} = entry;

const { purchaseURL, price } = await fetchGumroadData(gumroadID)

const openGraphImage = `/${slug}/og.png`;

const home = {
  className: "app-nav-link app-nav-link--home",
  href: `/apps/${slug}`,
  label: title,
  icon,
};

const helpLinks = [
  { className: "app-nav-link", href: `/apps/${slug}/help`, label: "Help" },
  {
    className: "app-nav-link",
    href: `/apps/${slug}/release-notes`,
    label: "Release Notes",
  },
];

const downloadLinks = [
  {
    className: "buy-button",
    href: `./${slug}/download`,
    label: price ? "Try Now" : "Download",
  },
  {
    className: "buy-button",
    href: purchaseURL,
    label:
      "Buy " + (price ? `<span class="buy-button__price">${price}</span>` : ""),
  },
];
---

<Root
  {...Astro.props}
  pageTitle={pageSuffix ? `${title}: ${pageSuffix}` : title}
  openGraphImage={openGraphImage}
>
  <nav id="app-nav" class="app-nav">
    <span class="app-nav__section app-nav__section--home">
      <a class={home.className} href={home.href}>{home.label}</a>
    </span>
    <button id="app-nav__menu-button" class="app-nav__menu-button">
      <Fragment set:html={chevronDown} />
    </button>
    <span class="app-nav__section app-nav__section--help">
      {
        helpLinks
          .filter(({ href }) => Boolean(href))
          .map(({ label, href, className }) => (
            <a class={className} href={String(href)}>
              <span set:html={label} />
            </a>
          ))
      }

    </span>
    <span class="app-nav__section app-nav__section--buy">
      {
        downloadLinks
          .filter(({ href }) => Boolean(href))
          .map(({ label, href, className }, i) => (
            <a class={className} href={String(href)}>
              <span set:html={label} />
            </a>
          ))
      }
    </span>
  </nav>
  <div class="layout-app">
    <slot />
  </div>
  <script>
    const el = document.getElementById('app-nav');
    if (el) {
      el.dataset.js = ''
    }
    const btn = document.getElementById('app-nav__menu-button') as HTMLButtonElement
    btn.ariaExpanded = "false"
    btn.addEventListener('click', (e) => {
      btn.ariaExpanded = btn.ariaExpanded === "true" ? "false" : "true";
    })
  </script>
</Root>
